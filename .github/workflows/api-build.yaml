name: Dotnet Api Build
description: |
    This workflow builds dotnet api applications. It installs dependencies, runs tests, builds the application and uploads the build artifact.
    This workflow is designed to be reusable and can be called from other workflows.
on:
  workflow_call:
    inputs:
      working_directory:
        description: ""
        required: true
        type: string

      dotnet_version:
        description: "The dotnet version to use"
        type: string
        required: false
        default: "9.x"

      nuget_file_path:
        description: "Path to the NuGet.Config file"
        required: true
        type: string
        default: "./Nuget.config"

      nuget_feed_source:
        description: "The NuGet feed URL"
        required: true
        type: string

      nuget_feed_name:
        description: "The name of the NuGet feed"
        required: true
        type: string

      project_path:
        required: true
        type: string

    secrets:
      azure_artifacts_base64_pat_token:
        description: "The base64 encoded PAT token for Azure Artifacts"
        required: false

  workflow_dispatch:

jobs:
  build:
    name: Build and test app
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET 9.x
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: ${{ inputs.dotnet_version }}

      - name: Auth NuGet
        working-directory: ${{ inputs.working_directory }}
        run: |
          base64_decoded=$(echo "${{ secrets.azure_artifacts_base64_pat_token }}" | base64 --decode)
          dotnet nuget remove source ${{ inputs.nuget_feed_name }} --configfile ${{ inputs.nuget_file_path }}
          dotnet nuget add source ${{ inputs.nuget_feed_source }} --name ${{ inputs.nuget_feed_name }} --username az --password $base64_decoded --configfile ${{ inputs.nuget_file_path }} --store-password-in-clear-text

      - name: Install dependencies
        working-directory: ${{ inputs.working_directory }}
        run: dotnet restore ${{ inputs.project_path }} --configfile "${{ inputs.nuget_file_path }}"

      - name: Build
        working-directory: ${{ inputs.working_directory }}
        run: dotnet build ${{ inputs.project_path }} --no-restore --configuration Release

      - name: Test
        working-directory: ${{ inputs.working_directory }}
        run: dotnet test ./**/*.[Uu]nit.[Tt]ests/*.csproj --no-build --configuration Release --collect:"XPlat Code Coverage" -v:q -l:"console;verbosity=normal" --no-restore

    # - name: Upload artifact
    #   if: ${{ inputs.upload_artifact == true }}
    #   uses: actions/upload-artifact@v4
    #   with:
    #     name: ${{ inputs.artifact_name }}
    #     path: ${{ inputs.working_directory }}/artifact
    #     include-hidden-files: true
    #     if-no-files-found: error