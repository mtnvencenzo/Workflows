name: UI Build
description: |
    This workflow builds the UI application. It installs dependencies, runs linting, tests, builds the application and uploads the build artifact.
    This workflow is designed to be reusable and can be called from other workflows.
on:
  workflow_call:
    inputs:
      working_directory:
        description: ""
        required: true
        type: string
      node_version:
        description: "The node version to use"
        required: false
        default: "23.5.x"
        type: string
      setup_files:
        required: false
        type: string
      artifact_name:
        description: "The name of the artifact to upload"
        required: false
        type: string
        default: "ui-build-artifact"
      upload_artifact:
        description: "Whether to upload the artifact or not"
        required: true
        type: boolean
      use_npm_auth:
        description: "Whether to authenticate to an npm feed or not"
        required: false
        default: true
        type: boolean
    secrets:
      azure_artifacts_base64_pat_token:
        description: "The base64 encoded PAT token for Azure Artifacts"
        required: false

  workflow_dispatch:

jobs:
  build:
    name: Build and test app
    runs-on: ubuntu-latest

    defaults:
      run:
        shell: bash

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup node
        uses: actions/setup-node@v4
        with:
          node-version: '${{ inputs.node_version }}'

      - name: Install yarn
        run: npm install -g yarn

      - name: Authenticate npm feed
        if: ${{ inputs.use_npm_auth != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          echo "@vecchi:registry=https://pkgs.dev.azure.com/vecchi/_packaging/global/npm/registry/" > .npmrc
          echo "; begin auth token" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/registry/:username=vecchi" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/registry/:_password=${{ secrets.azure_artifacts_base64_pat_token }}" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/registry/:email=noreply@cezzis.com" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/:username=vecchi" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/:_password=${{ secrets.azure_artifacts_base64_pat_token }}" >> .npmrc
          echo "//pkgs.dev.azure.com/vecchi/_packaging/global/npm/:email=noreply@cezzis.com" >> .npmrc
          echo "; end auth token" >> .npmrc

          echo "" >> .npmrc
          echo "always-auth=true" >> .npmrc

      - name: Install
        working-directory: ${{ inputs.working_directory }}
        run: yarn install --frozen-lockfile

      - name: Lint
        working-directory: ${{ inputs.working_directory }}
        run: yarn lint

      - name: Test and coverage
        working-directory: ${{ inputs.working_directory }}
        run: yarn coverage

      - name: Build
        working-directory: ${{ inputs.working_directory }}
        run: yarn build:prod

      - name: Prepare artifact
        if: ${{ inputs.setup_files != '' }}
        working-directory: ${{ inputs.working_directory }}
        run: |
          # Create an artifact directory and new copy of the dist folder
          mkdir -p artifact
          cp -r dist artifact/
          
          # Remove brackets and split the string into an array
          IFS=', ' read -r -a files <<< "$(echo "${{ inputs.setup_files }}" | tr -d '[]"')"

          # Iterate through the array and copy each file
          for file in "${files[@]}"; do
            if [[ -f "$file" ]]; then
              cp "$file" "artifact/"
              echo "Copied '$file' to 'artifact/'"
            else
              echo "File '$file' not found."
            fi
          done

          echo "Files copied to artifact directory including distribution and setup files"
          echo "------------------------------------------------------------------"
          cd artifact
          ls -R


      - name: Upload artifact
        if: ${{ inputs.upload_artifact == true }}
        uses: actions/upload-artifact@v4
        with:
          name: ${{ inputs.artifact_name }}
          path: ${{ inputs.working_directory }}/artifact
          include-hidden-files: true
          if-no-files-found: error